#+TITLE: Emacs Configuration

Emacs is a *highly* extensible /text-oriented user interface/, with capabilities that extend far beyond what most - if not all - other text editors offer.

[[./emacs_screenshot.png]]

* Startup

So that this file is rendered automatically by Github, it is called =README.org=, but Emacs will not expect its configuration to be found in a read-me file; it is the contents of =init.el= that are loaded by Emacs on startup. There are two ways the contents of a literate document could be extracted to a plain text file:

1. Load the file in Emacs and export the contents of the source blocks to a clean file.
2. Extract the contents of the source block via a emacs-lisp script or even the /init/ file itself.

The second of these options is preferable, you can bootstrap a new installation without an existing Emacs environment. A minimal =init.el= capable of loading a literate configuration might look like:

#+begin_src emacs-lisp :tangle no
(setq custom-file (locate-user-emacs-file "custom_vars.el"))
(load custom-file 'noerror 'nomessage)
(require 'package)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))
(package-initialize)
(unless package-archive-contents
 (package-refresh-contents))
(unless (package-installed-p 'use-package)
   (package-install 'use-package))
(require 'use-package)
(setq use-package-always-ensure t)
(require 'org)
(org-babel-load-file
  (expand-file-name "README.org"
                   user-emacs-directory))
#+end_src

Unfortunately, this approach requires that org mode is loaded before the contents of the custom configuration. This means that package repository initialisation must take place first to ensure that a single org version is used, not loaded partially once and then again in the literate configuration. In some cases, users have been able to export the contents of a literate configuration using only primitive emacs-lisp functions, but I didn't want to work out the required regular expressions.

* Options

All of the remaining initialisation can be performed from the literate file itself. The first step is calling some functions to disable unhelpful GUI components.

#+begin_src emacs-lisp
(menu-bar-mode -1) (tool-bar-mode -1)
(scroll-bar-mode -1)
(fringe-mode '(0 . 0))
(global-auto-revert-mode 1)
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
(global-set-key (kbd "M-u") 'universal-argument)
#+end_src

And then set the values of some variables.

#+begin_src emacs-lisp
(setq-default indent-tabs-mode t)
(setq-default c-basic-offset 4)
(setq inhibit-startup-echo-area-message "alex"
      inhibit-startup-message t
      initial-scratch-message "; Hello!"
      tab-width 4
      use-dialog-box nil
      scroll-conservatively 1000
      backup-inhibited t
      auto-save-default nil
      global-auto-revert-non-file-buffers t
      x-select-enable-clipboard nil
      user-full-name "Alexander Neville")
#+end_src

The default font is given an absolute height of =100=. The height of other fonts is specified relative to the height of the default font. In this case =:height 1.0= can be omitted.

#+begin_src emacs-lisp
(set-face-attribute 'default nil :family "Iosevka Nerd Font" :height 100)
(set-face-attribute 'variable-pitch nil :family "Noto Sans")
(set-face-attribute 'fixed-pitch nil :family "Iosevka Nerd Font")
#+end_src

* Packages

There are thousands of packages available to extend emacs. =M-x list-packages<CR>= will give you a list to browse.

** Themes

The /modus themes/ are very feature rich and roll a lot of initialisation into one package. The [[https://protesilaos.com/emacs/modus-themes][official documentation]] is the best place to find out about the configuration options available.

#+begin_src emacs-lisp
(use-package modus-themes
  :config
  (setq modus-themes-mode-line '(accented)
        modus-themes-region '(accented bg-only)
        modus-themes-completions '(opinionated)
	  ; modus-themes-mixed-fonts t
        modus-themes-bold-constructs t
        modus-themes-italic-constructs t
        modus-themes-paren-match '(bold underline)
        modus-themes-syntax '(faint)
        modus-themes-subtle-line-numbers t
        modus-themes-org-blocks 'gray-background
        modus-themes-scale-headings t
        modus-themes-headings
              '((1 . (1.5))
                (2 . (1.3))
                (t . (1.1)))
        modus-themes-common-palette-overrides
              '((fg-heading-1 blue)
                (fg-heading-2 cyan)
                (fg-heading-3 green)
		(bg-mode-line-active bg-blue-intense)
		; (bg-heading-1 bg-inactive)
		; (bg-heading-2 bg-inactive)
		; (bg-heading-3 bg-inactive)
		; (overline-heading-1 blue)
		; (overline-heading-2 cyan)
		; (overline-heading-3 green)
		)
  )
  (load-theme 'modus-operandi t))
#+end_src

The set of /doom emacs/ themes is also quite nice. I only ever load one of /modus/ or /doom/.

#+begin_src emacs-lisp :tangle no
(use-package doom-themes
  :ensure t
  :config
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t)
  (doom-themes-org-config)
  (load-theme 'doom-one t))

(use-package all-the-icons
  :ensure t)

#+end_src

#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :hook (after-init . doom-modeline-mode)
  :config
  (setq doom-modeline-height 50))
#+end_src

** Completion

Replace the default =M-x= behaviour with a /fuzzy finder/ experience. Ivy also includes /swiper/, which is a great way to search a file that the buffer is visiting.

#+begin_src emacs-lisp
(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (setq ivy-initial-inputs-alist nil)
  (ivy-mode 1))

(use-package ivy-rich
  :init
  (ivy-rich-mode 1))

(use-package counsel
  :bind (("M-x" . counsel-M-x)
         ("C-x b" . counsel-ibuffer)
         ("C-x C-f" . counsel-find-file)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history)))
#+end_src

** Keybindings

I use Vi/Vim keys in emacs. It would probably be too difficult to use Emacs keys and Vi keys simultaneously in different applications. I also use the Vi keys in tmux, zsh and my window manager, so Emacs would be the exception.

#+begin_src emacs-lisp
(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
  (evil-global-set-key 'motion "0" 'evil-beginning-of-visual-line)
  (evil-global-set-key 'motion "$" 'evil-end-of-visual-line)
  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))

(with-eval-after-load 'evil-maps
  (define-key evil-motion-state-map (kbd "RET") nil))

(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))
#+end_src

Leader key configuration, similar to my Neovim configuration. /Which-key/ will show you a list of keybinding from the current point after a short delay. This replaces some of the discover-ability lost by disabling the UI.

#+begin_src emacs-lisp
(use-package general
  :config
  (general-evil-setup t)
  (general-create-definer myconfig/leader-keys
      :prefix "SPC"
      :global-prefix "C-c"))

(myconfig/leader-keys 'normal 'override
  ;; switch/navigate
  "bb" 'counsel-switch-buffer
  "ff" 'counsel-find-file
  "ss" 'swiper
  ;; functions
  "d" 'dired
  "p" 'clipboard-yank
  "y" 'clipboard-kill-ring-save
  "e" 'eval-buffer
  "x" 'counsel-M-x
  "i" 'ibuffer
  "c" 'evil-delete-buffer
  "t" 'counsel-load-theme
  ;; files
  "le" '(lambda () (interactive) (find-file "~/.config/emacs/README.org"))
  ;; org
  "or" 'org-mode-restart
  "op" 'org-latex-preview
  "otl" 'org-toggle-link-display
  "oti" 'org-toggle-inline-images
  "otb" 'org-toggle-blocks
  "by" 'org-copy-src-block
  "bY" 'org-clipboard-copy-src-block
)

(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.01))
#+end_src

Define some interactive functions for those bindings.

#+begin_src emacs-lisp
(defun org-copy-src-block ()
  (interactive)
  (org-edit-src-code)
  (beginning-of-buffer)
  (mark-end-of-buffer)
  (kill-ring-save (point) (mark))
  (org-edit-src-abort)
  (message "Copied to register!"))

(defun org-clipboard-copy-src-block ()
  (interactive)
  (org-edit-src-code)
  (beginning-of-buffer)
  (mark-end-of-buffer)
  (clipboard-kill-ring-save (point) (mark))
  (org-edit-src-abort)
  (message "Copied to clipboard!"))

(defvar org-blocks-hidden nil)
(defun org-toggle-blocks ()
  (interactive)
  (if org-blocks-hidden
      (org-show-block-all)
    (org-hide-block-all))
  (setq-local org-blocks-hidden (not org-blocks-hidden)))
#+end_src

** Programming

This is a very quick programming setup, I won't use Emacs for programming very often.

#+begin_src emacs-lisp
(use-package tree-sitter
  :config
  (global-tree-sitter-mode))
  ; (add-hook 'prog-mode-hook #'tree-sitter-hl-mode))
(use-package tree-sitter-langs)

(use-package lsp-mode
  :init
  (setq lsp-keymap-prefix "C-c l")
  ; :config
  ; (add-hook 'prog-mode-hook #'lsp) # do this on per file basis
  :commands lsp)

(use-package lsp-pyright
  :ensure t
  :hook (python-mode . (lambda ()
                          (require 'lsp-pyright)
                          (lsp))))
(use-package company
  :config
  (add-hook 'prog-mode-hook #'company-mode))

(use-package smartparens
  :config
  ; (add-hook 'prog-mode-hook #'smartparens-mode))
  (smartparens-global-mode 1))

#+end_src

** Snippets

In the past I haven't used snippets too heavily, but I am gradually getting used to the idea. As it is so easy to set up in Emacs, I will have snippets.

#+begin_src emacs-lisp
(use-package yasnippet
  :config
  ; (setq yas-snippet-dirs '("~/.config/emacs/snippets"))
  ; (add-hook 'prog-mode-hook #'yas-minor-mode)
  ; (add-hook 'prog-mode-hook #'yas-minor-mode))
  (yas-global-mode 1))
(use-package yasnippet-snippets)
#+end_src

* Org Mode

/Org/ mode is a great tool for authoring. Another strength of org mode is its handling of source blocks, with which you can write code notebooks and do literate programming. This document acts as a literate configuration file for Emacs.

** Load

Define a function to evaluate when org mode is loaded, this is easier than many =(add-hook 'org-mode-hook ...)= expressions.

#+begin_src emacs-lisp
(defun org-mode-setup ()
  (org-indent-mode 1)
  ;; (variable-pitch-mode 1)
  (visual-line-mode nil)
  (setq org-hide-emphasis-markers t
        org-return-follows-link  t
        org-list-allow-alphabetical t
        org-catch-invisible-edits 'smart
        org-use-sub-superscripts '{}
        org-export-with-sub-superscripts '{}
        org-src-preserve-indentation nil
        org-edit-src-content-indentation 0
        org-format-latex-options (plist-put org-format-latex-options :scale 3.0)
        org-src-fontify-natively t
	  org-image-actual-width (list 600)
        org-ellipsis " …"
        org-link-frame-setup
            '((vm . vm-visit-folder-other-frame)
              (vm-imap . vm-visit-imap-folder-other-frame)
              (gnus . org-gnus-no-new-news)
              (file . find-file)
              (wl . wl-other-frame))
  ))
#+end_src

Call the set-up function when org mode is loaded.

#+begin_src emacs-lisp
(require 'org-indent)
(require 'org-src)
(setq
  org-startup-folded 'nofold
  org-startup-with-latex-preview nil ; slow
  org-startup-with-inline-images nil ; slow
)
(add-hook 'org-mode-hook 'org-mode-setup)
#+end_src

Structure templates make inserting source blocks much easier.

#+begin_src emacs-lisp
(require 'org-tempo)
(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))
#+end_src

Org babel is used for literate programming, including handling this very file.

#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python . t)))

(setq org-confirm-babel-evaluate nil)
#+end_src

** Fonts

To use =varaible-pitch-mode=, some faces need to be set to mono-space, such as code blocks and tables.

#+begin_src emacs-lisp :tangle no
(set-face-attribute 'org-block-begin-line nil :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-block-end-line nil :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-block nil :inherit 'fixed-pitch)
(set-face-attribute 'org-code nil :inherit 'fixed-pitch)
(set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
(set-face-attribute 'org-document-info-keyword nil :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
#+end_src

The /mixed-pitch/ package does many of the same things.

#+begin_src emacs-lisp :tangle no
(use-package mixed-pitch
  :hook
  (org-mode . mixed-pitch-mode))
#+end_src

Change the height of the face used to display /org-mode/ headings and the document title.

#+begin_src emacs-lisp :tangle no
(defun org-heading-face-setup ()
(dolist (face '((org-level-1 . 1.5)
                (org-level-2 . 1.4)
                (org-level-3 . 1.3)
                (org-level-4 . 1.2)
                (org-level-5 . 1.1)
                (org-level-6 . 1.1)
                (org-level-7 . 1.1)
                (org-level-8 . 1.1)))
  (set-face-attribute (car face) nil :family
		      (face-attribute 'default :family)
		      :weight 'bold :height (cdr face)))
)

(defun org-title-face-setup ()
  (set-face-attribute 'org-document-title nil :family (face-attribute 'default :family) :weight 'bold :height 1.6)
)
#+end_src

#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-title-face-setup)
#+end_src

Replace bullet points (lines with leading dashes) with Unicode characters.

#+begin_src emacs-lisp
(font-lock-add-keywords 'org-mode
                        '(("^ *\\([-]\\) "
                          (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
#+end_src

Ensure latex blocks are highlighted, but keep the default text background.

#+begin_src emacs-lisp
(setq org-highlight-latex-and-related '(latex native entities))
(add-to-list 'org-src-block-faces '("latex" (:inherit default :extend t)))
#+end_src

** Agenda & TODOs

I am now experimenting with some additional org features, besides those used for authoring. I am modifying the sequence(s) of TODO keywords and adding a prefix letter to each, for easy navigation. Creating and changing the state of a TODO item records a timestamp and switching to the cancelled state additionally requires a comment. This information is placed inside a drawer.

#+begin_src emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO(t!)" "ACTIVE(a!)" "|" "DONE(d!)" "CANCELED(c@)")
        (sequence "QUESTION(q!)"  "|" "SOLVED(s@)"))
      org-log-into-drawer t)
#+end_src

** Extra Packages

Optionally use a package like /org-modern/ to style the buffer. I am not using it currently.

#+begin_src emacs-lisp :tangle no
(use-package org-modern
  :hook (org-mode . org-modern-mode))
#+end_src

Most of the time I choose to hide a few org syntax elements. The /org-bullets/ package replaces the asterisks before each heading with Unicode symbols. /org-appear/ shows emphasis markers when the cursor hovers over emphasised text.

#+begin_src emacs-lisp
(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("●" "○" "●" "○" "●" "○" "●")))

(use-package org-appear
  :hook (org-mode . org-appear-mode)
  :config
  (setq org-appear-autoemphasis t
	org-appear-autolinks t)
  (run-at-time nil nil #'org-appear--set-elements))
#+end_src

For writing text, =visual-line-mode= is enabled. The /visual-fill-column/ package can set the point at which text wraps and centre text in the buffer, which is very helpful.

#+begin_src emacs-lisp
(use-package visual-fill-column
  :config
  (setq-default visual-fill-column-center-text t)
  (setq-default visual-fill-column-width 100))
(add-hook 'visual-line-mode-hook #'visual-fill-column-mode)
(advice-add 'text-scale-adjust :after #'visual-fill-column-adjust)
#+end_src

A couple of packages to help with editing latex in org mode. Some snippets have also been loaded.

#+begin_src emacs-lisp
(use-package cdlatex
  :config
    (add-hook 'org-mode-hook #'turn-on-org-cdlatex))
(use-package org-fragtog
  :config
(add-hook 'org-mode-hook 'org-fragtog-mode))
#+end_src

** Spell Checking

An essential feature for writing text. /Ispell/ ignores words in my private dictionary and code inside source blocks. /Flycheck/ highlights possible errors in the buffer.

#+begin_src emacs-lisp
(setq
 ispell-program-name "aspell"
 ispell-local-dictionary "british-ise"
 ispell-personal-dictionary "~/.config/emacs/british-ise.pws"
)
(defun my_config/org-ispell ()
  "Configure `ispell-skip-region-alist' for `org-mode'."
  (make-local-variable 'ispell-skip-region-alist)
  (add-to-list 'ispell-skip-region-alist '(org-property-drawer-re))
  (add-to-list 'ispell-skip-region-alist '("~" "~"))
  (add-to-list 'ispell-skip-region-alist '("=" "="))
  (add-to-list 'ispell-skip-region-alist '("^#\\+BEGIN_SRC" . "^#\\+END_SRC"))
  (add-to-list 'ispell-skip-region-alist '("^#\\+begin_src" . "^#\\+end_src")))
(add-hook 'org-mode-hook #'my_config/org-ispell)
(dolist (hook '(org-mode-hook))
  (add-hook hook (lambda () (flyspell-mode 1))))
(add-hook 'flyspell-mode-hook 'flyspell-buffer)
#+end_src

** Export

In org mode it is convenient to have many levels of headline nesting, but in HTML and latex the practical number of available heading levels is limited. In HTML, the tags =h1, ..., h6= are available, with =h1= being used for the document title, leaving a maximum of 5 levels. In the default latex /article/ class, =subsubsection= is the lowest heading level above paragraph, which is 3 levels. If more headings are required the should be changed to book or report.

#+begin_src text :tangle no
5. part           <- report/book
4. chapter
3. section        <- article
2. subsection
1. subsubsection
#+end_src

Set the maximum headline export level to 3, for the reasons given above. This can be changed on a file-by-file basis. Other settings are set to false by default.

#+begin_src emacs-lisp
(setq org-export-headline-levels 3
      org-export-with-title nil
      org-export-with-toc nil
      org-export-with-author nil
      org-export-with-date nil
      org-export-with-timestamps nil
      org-export-time-stamp-file nil)
#+end_src

*** Latex

Latex is a uniquely powerful typesetting system, but I would rather not worry about latex things when trying to write documents. The slightly more simple org syntax with the ability to embed latex fragments where required is a much better system. Org must be configured to export documents to latex properly.

#+begin_src emacs-lisp
(require 'ox-latex)
#+end_src

There are quite a few of variables to consider to get latex export working correctly:

- =org-latex-default-packages-alist=: minimal preamble, best to leave unchanged.
- =org-latex-packages-alist=: empty by default, add preamble common to all org documents.
- =org-latex-classes=: a list of ways to convert an org-structured document to latex.

The list =org-latex-classes= is very important. You can add a new class with a /class-name/, /header-string/ and /sectioning-structure/ (see the variable's help for more detailed information). In the header string you can write a preamble, optionally including the contents of =org-*-packages-alist=. So as to avoid repeating latex fragments, break a custom preamble into sections and bind to variables.

#+begin_src emacs-lisp
(setq
chapter-redef
"\\patchcmd{\\chapter}{\\thispagestyle{plain}}{\\thispagestyle{fancy}}{}{}
\\makeatletter
\\def\\@makechapterhead#1{
  \\vspace*{50\\p@}
  {\\parindent \\z@ \\raggedright \\normalfont
    \\ifnum \\c@secnumdepth >\\m@ne
        \\huge\\bfseries \\@chapapp\\space \\thechapter
        \\Huge\\bfseries \\thechapter.\\space%
        \\par\\nobreak
        \\vskip 20\\p@
    \\fi
    \\interlinepenalty\\@M
    \\Huge \\bfseries #1\\par\\nobreak
    \\vskip 40\\p@
  }}
\\makeatother\n"
report-fancyheader-def
"\\usepackage{fancyhdr}
\\pagestyle{fancy}
\\renewcommand{\\sectionmark}[1]{\\markright{\\thesection~- ~#1}}
\\renewcommand{\\chaptermark}[1]{\\markboth{\\chaptername~\\thechapter. \\textit{#1}}{}}
\\fancyhf{}
\\rfoot{page \\textbf{\\thepage}}
\\lfoot{\\nouppercase{\\leftmark}}
\\renewcommand{\\headrulewidth}{0pt}
\\renewcommand{\\footrulewidth}{0.4pt}\n"
article-fancyheader-def
"\\usepackage{fancyhdr}
\\pagestyle{fancy}
\\fancyhf{}
\\rfoot{page \\textbf{\\thepage}}
\\lfoot{\\nouppercase{\\leftmark}}
\\renewcommand{\\headrulewidth}{0pt}
\\renewcommand{\\footrulewidth}{0.4pt}\n"
common-head
"\\usepackage{svg}
\\svgsetup{inkscapelatex=false}
\\usepackage{blindtext}
\\usepackage{tcolorbox}
\\usepackage{etoolbox}
\\hypersetup{hidelinks}
\\usemintedstyle{bw}
\\setminted{autogobble=true, breaklines=true, breakbytokenanywhere=true, fontsize=\\small, xleftmargin=1cm, xrightmargin=1cm}
\\usepackage[indent=0.5cm]{parskip}
\\usepackage[a4paper, includefoot, margin=2.54cm]{geometry}\n"
default-head-setup
"\\usepackage[utf8]{inputenc}
\\usepackage{libertine}
\\usepackage{libertinust1math}
\\usepackage[T1]{fontenc}
\\usepackage{graphicx}
\\usepackage{longtable}
\\usepackage{wrapfig}
\\usepackage{rotating}
\\usepackage[normalem]{ulem}
\\usepackage{amsmath}
\\usepackage{amssymb}
\\usepackage{capt-of}
\\usepackage{hyperref}
\\usepackage{minted}\n"
)
#+end_src

Create each class as a list containing cons cells which represent the headline levels of the latex document. Build the /header-string/ by concatenating latex snippets together and add to the list. Finally, add each user-defined class to =org-latex-classes=.

#+begin_src emacs-lisp
(setq long-report   '(("\\part{%s}" . "\\part*{%s}")
		      ("\\chapter{%s}" . "\\chapter*{%s}")
		      ("\\section{%s}" . "\\section*{%s}")
		      ("\\subsection{%s}" . "\\subsection*{%s}")
		      ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
      short-report  '(("\\chapter{%s}" . "\\chapter*{%s}")
		      ("\\section{%s}" . "\\section*{%s}")
		      ("\\subsection{%s}" . "\\subsection*{%s}")
		      ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
      custom-article '(("\\section{%s}" . "\\section*{%s}")
		      ("\\subsection{%s}" . "\\subsection*{%s}")
		      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))

(setq report-common-header-string (concat "\\documentclass{report}\n[NO-DEFAULT-PACKAGES]\n[NO-PACKAGES]\n" default-head-setup chapter-redef common-head report-fancyheader-def "[EXTRA]"))
(add-to-list 'short-report report-common-header-string)
(add-to-list 'long-report report-common-header-string)
(add-to-list 'custom-article (concat "\\documentclass{article}\n[NO-DEFAULT-PACKAGES]\n[NO-PACKAGES]\n" default-head-setup common-head article-fancyheader-def "[EXTRA]"))
(add-to-list 'short-report "short-report")
(add-to-list 'long-report "long-report")
(add-to-list 'custom-article "custom-article")

(with-eval-after-load 'ox-latex
    (add-to-list 'org-latex-classes long-report)
    (add-to-list 'org-latex-classes short-report)
    (add-to-list 'org-latex-classes custom-article))
#+end_src

The following export options are available in each org document. Prepend a =#+= to use.

- =latex_class=: looked up in =org-latex-classes= to find the header to use.
- =latex_class_options=: document class options, could be rolled into the class header.
- =latex_header= & =latex_header_extra=: lines to be added to the header string for this file.

Use minted for exporting code blocks and set the preferred compiler. The compiler can be changed with the org option =latex_compiler=.

#+begin_src emacs-lisp
(setq org-latex-listings 'minted
      org-export-in-background t
      org-latex-compiler "pdflatex"
      org-latex-pdf-process '("latexmk -f -pdf -%latex -shell-escape -interaction=nonstopmode -output-directory=%o %f"))
#+end_src

*** HTML

For now export with as few features as possible and generate simple HTML.

#+begin_src emacs-lisp
(require 'ox-html)
(setq org-html-validation-link nil
      org-html-preamble nil
      org-html-postamle nil
      org-html-head-include-scripts nil
      org-html-head-include-default-style nil)
#+end_src
